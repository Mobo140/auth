// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Mobo140/auth/internal/repository.UserCacheRepository -o user_cache_repository_minimock.go -n UserCacheRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Mobo140/auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserCacheRepositoryMock implements mm_repository.UserCacheRepository
type UserCacheRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetHashAndRoleByUsername          func(ctx context.Context, username string) (up1 *model.UserAuthData, err error)
	funcGetHashAndRoleByUsernameOrigin    string
	inspectFuncGetHashAndRoleByUsername   func(ctx context.Context, username string)
	afterGetHashAndRoleByUsernameCounter  uint64
	beforeGetHashAndRoleByUsernameCounter uint64
	GetHashAndRoleByUsernameMock          mUserCacheRepositoryMockGetHashAndRoleByUsername

	funcSetHashAndRole          func(ctx context.Context, username string, data *model.UserAuthData) (err error)
	funcSetHashAndRoleOrigin    string
	inspectFuncSetHashAndRole   func(ctx context.Context, username string, data *model.UserAuthData)
	afterSetHashAndRoleCounter  uint64
	beforeSetHashAndRoleCounter uint64
	SetHashAndRoleMock          mUserCacheRepositoryMockSetHashAndRole
}

// NewUserCacheRepositoryMock returns a mock for mm_repository.UserCacheRepository
func NewUserCacheRepositoryMock(t minimock.Tester) *UserCacheRepositoryMock {
	m := &UserCacheRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetHashAndRoleByUsernameMock = mUserCacheRepositoryMockGetHashAndRoleByUsername{mock: m}
	m.GetHashAndRoleByUsernameMock.callArgs = []*UserCacheRepositoryMockGetHashAndRoleByUsernameParams{}

	m.SetHashAndRoleMock = mUserCacheRepositoryMockSetHashAndRole{mock: m}
	m.SetHashAndRoleMock.callArgs = []*UserCacheRepositoryMockSetHashAndRoleParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserCacheRepositoryMockGetHashAndRoleByUsername struct {
	optional           bool
	mock               *UserCacheRepositoryMock
	defaultExpectation *UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation
	expectations       []*UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation

	callArgs []*UserCacheRepositoryMockGetHashAndRoleByUsernameParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation specifies expectation struct of the UserCacheRepository.GetHashAndRoleByUsername
type UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation struct {
	mock               *UserCacheRepositoryMock
	params             *UserCacheRepositoryMockGetHashAndRoleByUsernameParams
	paramPtrs          *UserCacheRepositoryMockGetHashAndRoleByUsernameParamPtrs
	expectationOrigins UserCacheRepositoryMockGetHashAndRoleByUsernameExpectationOrigins
	results            *UserCacheRepositoryMockGetHashAndRoleByUsernameResults
	returnOrigin       string
	Counter            uint64
}

// UserCacheRepositoryMockGetHashAndRoleByUsernameParams contains parameters of the UserCacheRepository.GetHashAndRoleByUsername
type UserCacheRepositoryMockGetHashAndRoleByUsernameParams struct {
	ctx      context.Context
	username string
}

// UserCacheRepositoryMockGetHashAndRoleByUsernameParamPtrs contains pointers to parameters of the UserCacheRepository.GetHashAndRoleByUsername
type UserCacheRepositoryMockGetHashAndRoleByUsernameParamPtrs struct {
	ctx      *context.Context
	username *string
}

// UserCacheRepositoryMockGetHashAndRoleByUsernameResults contains results of the UserCacheRepository.GetHashAndRoleByUsername
type UserCacheRepositoryMockGetHashAndRoleByUsernameResults struct {
	up1 *model.UserAuthData
	err error
}

// UserCacheRepositoryMockGetHashAndRoleByUsernameOrigins contains origins of expectations of the UserCacheRepository.GetHashAndRoleByUsername
type UserCacheRepositoryMockGetHashAndRoleByUsernameExpectationOrigins struct {
	origin         string
	originCtx      string
	originUsername string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Optional() *mUserCacheRepositoryMockGetHashAndRoleByUsername {
	mmGetHashAndRoleByUsername.optional = true
	return mmGetHashAndRoleByUsername
}

// Expect sets up expected params for UserCacheRepository.GetHashAndRoleByUsername
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Expect(ctx context.Context, username string) *mUserCacheRepositoryMockGetHashAndRoleByUsername {
	if mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Set")
	}

	if mmGetHashAndRoleByUsername.defaultExpectation == nil {
		mmGetHashAndRoleByUsername.defaultExpectation = &UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation{}
	}

	if mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by ExpectParams functions")
	}

	mmGetHashAndRoleByUsername.defaultExpectation.params = &UserCacheRepositoryMockGetHashAndRoleByUsernameParams{ctx, username}
	mmGetHashAndRoleByUsername.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetHashAndRoleByUsername.expectations {
		if minimock.Equal(e.params, mmGetHashAndRoleByUsername.defaultExpectation.params) {
			mmGetHashAndRoleByUsername.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetHashAndRoleByUsername.defaultExpectation.params)
		}
	}

	return mmGetHashAndRoleByUsername
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheRepository.GetHashAndRoleByUsername
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) ExpectCtxParam1(ctx context.Context) *mUserCacheRepositoryMockGetHashAndRoleByUsername {
	if mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Set")
	}

	if mmGetHashAndRoleByUsername.defaultExpectation == nil {
		mmGetHashAndRoleByUsername.defaultExpectation = &UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation{}
	}

	if mmGetHashAndRoleByUsername.defaultExpectation.params != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Expect")
	}

	if mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs == nil {
		mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs = &UserCacheRepositoryMockGetHashAndRoleByUsernameParamPtrs{}
	}
	mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetHashAndRoleByUsername.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetHashAndRoleByUsername
}

// ExpectUsernameParam2 sets up expected param username for UserCacheRepository.GetHashAndRoleByUsername
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) ExpectUsernameParam2(username string) *mUserCacheRepositoryMockGetHashAndRoleByUsername {
	if mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Set")
	}

	if mmGetHashAndRoleByUsername.defaultExpectation == nil {
		mmGetHashAndRoleByUsername.defaultExpectation = &UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation{}
	}

	if mmGetHashAndRoleByUsername.defaultExpectation.params != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Expect")
	}

	if mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs == nil {
		mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs = &UserCacheRepositoryMockGetHashAndRoleByUsernameParamPtrs{}
	}
	mmGetHashAndRoleByUsername.defaultExpectation.paramPtrs.username = &username
	mmGetHashAndRoleByUsername.defaultExpectation.expectationOrigins.originUsername = minimock.CallerInfo(1)

	return mmGetHashAndRoleByUsername
}

// Inspect accepts an inspector function that has same arguments as the UserCacheRepository.GetHashAndRoleByUsername
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Inspect(f func(ctx context.Context, username string)) *mUserCacheRepositoryMockGetHashAndRoleByUsername {
	if mmGetHashAndRoleByUsername.mock.inspectFuncGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("Inspect function is already set for UserCacheRepositoryMock.GetHashAndRoleByUsername")
	}

	mmGetHashAndRoleByUsername.mock.inspectFuncGetHashAndRoleByUsername = f

	return mmGetHashAndRoleByUsername
}

// Return sets up results that will be returned by UserCacheRepository.GetHashAndRoleByUsername
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Return(up1 *model.UserAuthData, err error) *UserCacheRepositoryMock {
	if mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Set")
	}

	if mmGetHashAndRoleByUsername.defaultExpectation == nil {
		mmGetHashAndRoleByUsername.defaultExpectation = &UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation{mock: mmGetHashAndRoleByUsername.mock}
	}
	mmGetHashAndRoleByUsername.defaultExpectation.results = &UserCacheRepositoryMockGetHashAndRoleByUsernameResults{up1, err}
	mmGetHashAndRoleByUsername.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetHashAndRoleByUsername.mock
}

// Set uses given function f to mock the UserCacheRepository.GetHashAndRoleByUsername method
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Set(f func(ctx context.Context, username string) (up1 *model.UserAuthData, err error)) *UserCacheRepositoryMock {
	if mmGetHashAndRoleByUsername.defaultExpectation != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("Default expectation is already set for the UserCacheRepository.GetHashAndRoleByUsername method")
	}

	if len(mmGetHashAndRoleByUsername.expectations) > 0 {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("Some expectations are already set for the UserCacheRepository.GetHashAndRoleByUsername method")
	}

	mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername = f
	mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsernameOrigin = minimock.CallerInfo(1)
	return mmGetHashAndRoleByUsername.mock
}

// When sets expectation for the UserCacheRepository.GetHashAndRoleByUsername which will trigger the result defined by the following
// Then helper
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) When(ctx context.Context, username string) *UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation {
	if mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("UserCacheRepositoryMock.GetHashAndRoleByUsername mock is already set by Set")
	}

	expectation := &UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation{
		mock:               mmGetHashAndRoleByUsername.mock,
		params:             &UserCacheRepositoryMockGetHashAndRoleByUsernameParams{ctx, username},
		expectationOrigins: UserCacheRepositoryMockGetHashAndRoleByUsernameExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetHashAndRoleByUsername.expectations = append(mmGetHashAndRoleByUsername.expectations, expectation)
	return expectation
}

// Then sets up UserCacheRepository.GetHashAndRoleByUsername return parameters for the expectation previously defined by the When method
func (e *UserCacheRepositoryMockGetHashAndRoleByUsernameExpectation) Then(up1 *model.UserAuthData, err error) *UserCacheRepositoryMock {
	e.results = &UserCacheRepositoryMockGetHashAndRoleByUsernameResults{up1, err}
	return e.mock
}

// Times sets number of times UserCacheRepository.GetHashAndRoleByUsername should be invoked
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Times(n uint64) *mUserCacheRepositoryMockGetHashAndRoleByUsername {
	if n == 0 {
		mmGetHashAndRoleByUsername.mock.t.Fatalf("Times of UserCacheRepositoryMock.GetHashAndRoleByUsername mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetHashAndRoleByUsername.expectedInvocations, n)
	mmGetHashAndRoleByUsername.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetHashAndRoleByUsername
}

func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) invocationsDone() bool {
	if len(mmGetHashAndRoleByUsername.expectations) == 0 && mmGetHashAndRoleByUsername.defaultExpectation == nil && mmGetHashAndRoleByUsername.mock.funcGetHashAndRoleByUsername == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetHashAndRoleByUsername.mock.afterGetHashAndRoleByUsernameCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetHashAndRoleByUsername.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetHashAndRoleByUsername implements mm_repository.UserCacheRepository
func (mmGetHashAndRoleByUsername *UserCacheRepositoryMock) GetHashAndRoleByUsername(ctx context.Context, username string) (up1 *model.UserAuthData, err error) {
	mm_atomic.AddUint64(&mmGetHashAndRoleByUsername.beforeGetHashAndRoleByUsernameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetHashAndRoleByUsername.afterGetHashAndRoleByUsernameCounter, 1)

	mmGetHashAndRoleByUsername.t.Helper()

	if mmGetHashAndRoleByUsername.inspectFuncGetHashAndRoleByUsername != nil {
		mmGetHashAndRoleByUsername.inspectFuncGetHashAndRoleByUsername(ctx, username)
	}

	mm_params := UserCacheRepositoryMockGetHashAndRoleByUsernameParams{ctx, username}

	// Record call args
	mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.mutex.Lock()
	mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.callArgs = append(mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.callArgs, &mm_params)
	mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.mutex.Unlock()

	for _, e := range mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.params
		mm_want_ptrs := mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.paramPtrs

		mm_got := UserCacheRepositoryMockGetHashAndRoleByUsernameParams{ctx, username}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetHashAndRoleByUsername.t.Errorf("UserCacheRepositoryMock.GetHashAndRoleByUsername got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.username != nil && !minimock.Equal(*mm_want_ptrs.username, mm_got.username) {
				mmGetHashAndRoleByUsername.t.Errorf("UserCacheRepositoryMock.GetHashAndRoleByUsername got unexpected parameter username, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.expectationOrigins.originUsername, *mm_want_ptrs.username, mm_got.username, minimock.Diff(*mm_want_ptrs.username, mm_got.username))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetHashAndRoleByUsername.t.Errorf("UserCacheRepositoryMock.GetHashAndRoleByUsername got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetHashAndRoleByUsername.GetHashAndRoleByUsernameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetHashAndRoleByUsername.t.Fatal("No results are set for the UserCacheRepositoryMock.GetHashAndRoleByUsername")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetHashAndRoleByUsername.funcGetHashAndRoleByUsername != nil {
		return mmGetHashAndRoleByUsername.funcGetHashAndRoleByUsername(ctx, username)
	}
	mmGetHashAndRoleByUsername.t.Fatalf("Unexpected call to UserCacheRepositoryMock.GetHashAndRoleByUsername. %v %v", ctx, username)
	return
}

// GetHashAndRoleByUsernameAfterCounter returns a count of finished UserCacheRepositoryMock.GetHashAndRoleByUsername invocations
func (mmGetHashAndRoleByUsername *UserCacheRepositoryMock) GetHashAndRoleByUsernameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetHashAndRoleByUsername.afterGetHashAndRoleByUsernameCounter)
}

// GetHashAndRoleByUsernameBeforeCounter returns a count of UserCacheRepositoryMock.GetHashAndRoleByUsername invocations
func (mmGetHashAndRoleByUsername *UserCacheRepositoryMock) GetHashAndRoleByUsernameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetHashAndRoleByUsername.beforeGetHashAndRoleByUsernameCounter)
}

// Calls returns a list of arguments used in each call to UserCacheRepositoryMock.GetHashAndRoleByUsername.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetHashAndRoleByUsername *mUserCacheRepositoryMockGetHashAndRoleByUsername) Calls() []*UserCacheRepositoryMockGetHashAndRoleByUsernameParams {
	mmGetHashAndRoleByUsername.mutex.RLock()

	argCopy := make([]*UserCacheRepositoryMockGetHashAndRoleByUsernameParams, len(mmGetHashAndRoleByUsername.callArgs))
	copy(argCopy, mmGetHashAndRoleByUsername.callArgs)

	mmGetHashAndRoleByUsername.mutex.RUnlock()

	return argCopy
}

// MinimockGetHashAndRoleByUsernameDone returns true if the count of the GetHashAndRoleByUsername invocations corresponds
// the number of defined expectations
func (m *UserCacheRepositoryMock) MinimockGetHashAndRoleByUsernameDone() bool {
	if m.GetHashAndRoleByUsernameMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetHashAndRoleByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetHashAndRoleByUsernameMock.invocationsDone()
}

// MinimockGetHashAndRoleByUsernameInspect logs each unmet expectation
func (m *UserCacheRepositoryMock) MinimockGetHashAndRoleByUsernameInspect() {
	for _, e := range m.GetHashAndRoleByUsernameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.GetHashAndRoleByUsername at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetHashAndRoleByUsernameCounter := mm_atomic.LoadUint64(&m.afterGetHashAndRoleByUsernameCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetHashAndRoleByUsernameMock.defaultExpectation != nil && afterGetHashAndRoleByUsernameCounter < 1 {
		if m.GetHashAndRoleByUsernameMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.GetHashAndRoleByUsername at\n%s", m.GetHashAndRoleByUsernameMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.GetHashAndRoleByUsername at\n%s with params: %#v", m.GetHashAndRoleByUsernameMock.defaultExpectation.expectationOrigins.origin, *m.GetHashAndRoleByUsernameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetHashAndRoleByUsername != nil && afterGetHashAndRoleByUsernameCounter < 1 {
		m.t.Errorf("Expected call to UserCacheRepositoryMock.GetHashAndRoleByUsername at\n%s", m.funcGetHashAndRoleByUsernameOrigin)
	}

	if !m.GetHashAndRoleByUsernameMock.invocationsDone() && afterGetHashAndRoleByUsernameCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheRepositoryMock.GetHashAndRoleByUsername at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetHashAndRoleByUsernameMock.expectedInvocations), m.GetHashAndRoleByUsernameMock.expectedInvocationsOrigin, afterGetHashAndRoleByUsernameCounter)
	}
}

type mUserCacheRepositoryMockSetHashAndRole struct {
	optional           bool
	mock               *UserCacheRepositoryMock
	defaultExpectation *UserCacheRepositoryMockSetHashAndRoleExpectation
	expectations       []*UserCacheRepositoryMockSetHashAndRoleExpectation

	callArgs []*UserCacheRepositoryMockSetHashAndRoleParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserCacheRepositoryMockSetHashAndRoleExpectation specifies expectation struct of the UserCacheRepository.SetHashAndRole
type UserCacheRepositoryMockSetHashAndRoleExpectation struct {
	mock               *UserCacheRepositoryMock
	params             *UserCacheRepositoryMockSetHashAndRoleParams
	paramPtrs          *UserCacheRepositoryMockSetHashAndRoleParamPtrs
	expectationOrigins UserCacheRepositoryMockSetHashAndRoleExpectationOrigins
	results            *UserCacheRepositoryMockSetHashAndRoleResults
	returnOrigin       string
	Counter            uint64
}

// UserCacheRepositoryMockSetHashAndRoleParams contains parameters of the UserCacheRepository.SetHashAndRole
type UserCacheRepositoryMockSetHashAndRoleParams struct {
	ctx      context.Context
	username string
	data     *model.UserAuthData
}

// UserCacheRepositoryMockSetHashAndRoleParamPtrs contains pointers to parameters of the UserCacheRepository.SetHashAndRole
type UserCacheRepositoryMockSetHashAndRoleParamPtrs struct {
	ctx      *context.Context
	username *string
	data     **model.UserAuthData
}

// UserCacheRepositoryMockSetHashAndRoleResults contains results of the UserCacheRepository.SetHashAndRole
type UserCacheRepositoryMockSetHashAndRoleResults struct {
	err error
}

// UserCacheRepositoryMockSetHashAndRoleOrigins contains origins of expectations of the UserCacheRepository.SetHashAndRole
type UserCacheRepositoryMockSetHashAndRoleExpectationOrigins struct {
	origin         string
	originCtx      string
	originUsername string
	originData     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Optional() *mUserCacheRepositoryMockSetHashAndRole {
	mmSetHashAndRole.optional = true
	return mmSetHashAndRole
}

// Expect sets up expected params for UserCacheRepository.SetHashAndRole
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Expect(ctx context.Context, username string, data *model.UserAuthData) *mUserCacheRepositoryMockSetHashAndRole {
	if mmSetHashAndRole.mock.funcSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Set")
	}

	if mmSetHashAndRole.defaultExpectation == nil {
		mmSetHashAndRole.defaultExpectation = &UserCacheRepositoryMockSetHashAndRoleExpectation{}
	}

	if mmSetHashAndRole.defaultExpectation.paramPtrs != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by ExpectParams functions")
	}

	mmSetHashAndRole.defaultExpectation.params = &UserCacheRepositoryMockSetHashAndRoleParams{ctx, username, data}
	mmSetHashAndRole.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSetHashAndRole.expectations {
		if minimock.Equal(e.params, mmSetHashAndRole.defaultExpectation.params) {
			mmSetHashAndRole.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetHashAndRole.defaultExpectation.params)
		}
	}

	return mmSetHashAndRole
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheRepository.SetHashAndRole
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) ExpectCtxParam1(ctx context.Context) *mUserCacheRepositoryMockSetHashAndRole {
	if mmSetHashAndRole.mock.funcSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Set")
	}

	if mmSetHashAndRole.defaultExpectation == nil {
		mmSetHashAndRole.defaultExpectation = &UserCacheRepositoryMockSetHashAndRoleExpectation{}
	}

	if mmSetHashAndRole.defaultExpectation.params != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Expect")
	}

	if mmSetHashAndRole.defaultExpectation.paramPtrs == nil {
		mmSetHashAndRole.defaultExpectation.paramPtrs = &UserCacheRepositoryMockSetHashAndRoleParamPtrs{}
	}
	mmSetHashAndRole.defaultExpectation.paramPtrs.ctx = &ctx
	mmSetHashAndRole.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSetHashAndRole
}

// ExpectUsernameParam2 sets up expected param username for UserCacheRepository.SetHashAndRole
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) ExpectUsernameParam2(username string) *mUserCacheRepositoryMockSetHashAndRole {
	if mmSetHashAndRole.mock.funcSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Set")
	}

	if mmSetHashAndRole.defaultExpectation == nil {
		mmSetHashAndRole.defaultExpectation = &UserCacheRepositoryMockSetHashAndRoleExpectation{}
	}

	if mmSetHashAndRole.defaultExpectation.params != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Expect")
	}

	if mmSetHashAndRole.defaultExpectation.paramPtrs == nil {
		mmSetHashAndRole.defaultExpectation.paramPtrs = &UserCacheRepositoryMockSetHashAndRoleParamPtrs{}
	}
	mmSetHashAndRole.defaultExpectation.paramPtrs.username = &username
	mmSetHashAndRole.defaultExpectation.expectationOrigins.originUsername = minimock.CallerInfo(1)

	return mmSetHashAndRole
}

// ExpectDataParam3 sets up expected param data for UserCacheRepository.SetHashAndRole
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) ExpectDataParam3(data *model.UserAuthData) *mUserCacheRepositoryMockSetHashAndRole {
	if mmSetHashAndRole.mock.funcSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Set")
	}

	if mmSetHashAndRole.defaultExpectation == nil {
		mmSetHashAndRole.defaultExpectation = &UserCacheRepositoryMockSetHashAndRoleExpectation{}
	}

	if mmSetHashAndRole.defaultExpectation.params != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Expect")
	}

	if mmSetHashAndRole.defaultExpectation.paramPtrs == nil {
		mmSetHashAndRole.defaultExpectation.paramPtrs = &UserCacheRepositoryMockSetHashAndRoleParamPtrs{}
	}
	mmSetHashAndRole.defaultExpectation.paramPtrs.data = &data
	mmSetHashAndRole.defaultExpectation.expectationOrigins.originData = minimock.CallerInfo(1)

	return mmSetHashAndRole
}

// Inspect accepts an inspector function that has same arguments as the UserCacheRepository.SetHashAndRole
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Inspect(f func(ctx context.Context, username string, data *model.UserAuthData)) *mUserCacheRepositoryMockSetHashAndRole {
	if mmSetHashAndRole.mock.inspectFuncSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("Inspect function is already set for UserCacheRepositoryMock.SetHashAndRole")
	}

	mmSetHashAndRole.mock.inspectFuncSetHashAndRole = f

	return mmSetHashAndRole
}

// Return sets up results that will be returned by UserCacheRepository.SetHashAndRole
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Return(err error) *UserCacheRepositoryMock {
	if mmSetHashAndRole.mock.funcSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Set")
	}

	if mmSetHashAndRole.defaultExpectation == nil {
		mmSetHashAndRole.defaultExpectation = &UserCacheRepositoryMockSetHashAndRoleExpectation{mock: mmSetHashAndRole.mock}
	}
	mmSetHashAndRole.defaultExpectation.results = &UserCacheRepositoryMockSetHashAndRoleResults{err}
	mmSetHashAndRole.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSetHashAndRole.mock
}

// Set uses given function f to mock the UserCacheRepository.SetHashAndRole method
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Set(f func(ctx context.Context, username string, data *model.UserAuthData) (err error)) *UserCacheRepositoryMock {
	if mmSetHashAndRole.defaultExpectation != nil {
		mmSetHashAndRole.mock.t.Fatalf("Default expectation is already set for the UserCacheRepository.SetHashAndRole method")
	}

	if len(mmSetHashAndRole.expectations) > 0 {
		mmSetHashAndRole.mock.t.Fatalf("Some expectations are already set for the UserCacheRepository.SetHashAndRole method")
	}

	mmSetHashAndRole.mock.funcSetHashAndRole = f
	mmSetHashAndRole.mock.funcSetHashAndRoleOrigin = minimock.CallerInfo(1)
	return mmSetHashAndRole.mock
}

// When sets expectation for the UserCacheRepository.SetHashAndRole which will trigger the result defined by the following
// Then helper
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) When(ctx context.Context, username string, data *model.UserAuthData) *UserCacheRepositoryMockSetHashAndRoleExpectation {
	if mmSetHashAndRole.mock.funcSetHashAndRole != nil {
		mmSetHashAndRole.mock.t.Fatalf("UserCacheRepositoryMock.SetHashAndRole mock is already set by Set")
	}

	expectation := &UserCacheRepositoryMockSetHashAndRoleExpectation{
		mock:               mmSetHashAndRole.mock,
		params:             &UserCacheRepositoryMockSetHashAndRoleParams{ctx, username, data},
		expectationOrigins: UserCacheRepositoryMockSetHashAndRoleExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSetHashAndRole.expectations = append(mmSetHashAndRole.expectations, expectation)
	return expectation
}

// Then sets up UserCacheRepository.SetHashAndRole return parameters for the expectation previously defined by the When method
func (e *UserCacheRepositoryMockSetHashAndRoleExpectation) Then(err error) *UserCacheRepositoryMock {
	e.results = &UserCacheRepositoryMockSetHashAndRoleResults{err}
	return e.mock
}

// Times sets number of times UserCacheRepository.SetHashAndRole should be invoked
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Times(n uint64) *mUserCacheRepositoryMockSetHashAndRole {
	if n == 0 {
		mmSetHashAndRole.mock.t.Fatalf("Times of UserCacheRepositoryMock.SetHashAndRole mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSetHashAndRole.expectedInvocations, n)
	mmSetHashAndRole.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSetHashAndRole
}

func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) invocationsDone() bool {
	if len(mmSetHashAndRole.expectations) == 0 && mmSetHashAndRole.defaultExpectation == nil && mmSetHashAndRole.mock.funcSetHashAndRole == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSetHashAndRole.mock.afterSetHashAndRoleCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSetHashAndRole.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SetHashAndRole implements mm_repository.UserCacheRepository
func (mmSetHashAndRole *UserCacheRepositoryMock) SetHashAndRole(ctx context.Context, username string, data *model.UserAuthData) (err error) {
	mm_atomic.AddUint64(&mmSetHashAndRole.beforeSetHashAndRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmSetHashAndRole.afterSetHashAndRoleCounter, 1)

	mmSetHashAndRole.t.Helper()

	if mmSetHashAndRole.inspectFuncSetHashAndRole != nil {
		mmSetHashAndRole.inspectFuncSetHashAndRole(ctx, username, data)
	}

	mm_params := UserCacheRepositoryMockSetHashAndRoleParams{ctx, username, data}

	// Record call args
	mmSetHashAndRole.SetHashAndRoleMock.mutex.Lock()
	mmSetHashAndRole.SetHashAndRoleMock.callArgs = append(mmSetHashAndRole.SetHashAndRoleMock.callArgs, &mm_params)
	mmSetHashAndRole.SetHashAndRoleMock.mutex.Unlock()

	for _, e := range mmSetHashAndRole.SetHashAndRoleMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.Counter, 1)
		mm_want := mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.params
		mm_want_ptrs := mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.paramPtrs

		mm_got := UserCacheRepositoryMockSetHashAndRoleParams{ctx, username, data}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSetHashAndRole.t.Errorf("UserCacheRepositoryMock.SetHashAndRole got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.username != nil && !minimock.Equal(*mm_want_ptrs.username, mm_got.username) {
				mmSetHashAndRole.t.Errorf("UserCacheRepositoryMock.SetHashAndRole got unexpected parameter username, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.expectationOrigins.originUsername, *mm_want_ptrs.username, mm_got.username, minimock.Diff(*mm_want_ptrs.username, mm_got.username))
			}

			if mm_want_ptrs.data != nil && !minimock.Equal(*mm_want_ptrs.data, mm_got.data) {
				mmSetHashAndRole.t.Errorf("UserCacheRepositoryMock.SetHashAndRole got unexpected parameter data, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.expectationOrigins.originData, *mm_want_ptrs.data, mm_got.data, minimock.Diff(*mm_want_ptrs.data, mm_got.data))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetHashAndRole.t.Errorf("UserCacheRepositoryMock.SetHashAndRole got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetHashAndRole.SetHashAndRoleMock.defaultExpectation.results
		if mm_results == nil {
			mmSetHashAndRole.t.Fatal("No results are set for the UserCacheRepositoryMock.SetHashAndRole")
		}
		return (*mm_results).err
	}
	if mmSetHashAndRole.funcSetHashAndRole != nil {
		return mmSetHashAndRole.funcSetHashAndRole(ctx, username, data)
	}
	mmSetHashAndRole.t.Fatalf("Unexpected call to UserCacheRepositoryMock.SetHashAndRole. %v %v %v", ctx, username, data)
	return
}

// SetHashAndRoleAfterCounter returns a count of finished UserCacheRepositoryMock.SetHashAndRole invocations
func (mmSetHashAndRole *UserCacheRepositoryMock) SetHashAndRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetHashAndRole.afterSetHashAndRoleCounter)
}

// SetHashAndRoleBeforeCounter returns a count of UserCacheRepositoryMock.SetHashAndRole invocations
func (mmSetHashAndRole *UserCacheRepositoryMock) SetHashAndRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetHashAndRole.beforeSetHashAndRoleCounter)
}

// Calls returns a list of arguments used in each call to UserCacheRepositoryMock.SetHashAndRole.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetHashAndRole *mUserCacheRepositoryMockSetHashAndRole) Calls() []*UserCacheRepositoryMockSetHashAndRoleParams {
	mmSetHashAndRole.mutex.RLock()

	argCopy := make([]*UserCacheRepositoryMockSetHashAndRoleParams, len(mmSetHashAndRole.callArgs))
	copy(argCopy, mmSetHashAndRole.callArgs)

	mmSetHashAndRole.mutex.RUnlock()

	return argCopy
}

// MinimockSetHashAndRoleDone returns true if the count of the SetHashAndRole invocations corresponds
// the number of defined expectations
func (m *UserCacheRepositoryMock) MinimockSetHashAndRoleDone() bool {
	if m.SetHashAndRoleMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetHashAndRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetHashAndRoleMock.invocationsDone()
}

// MinimockSetHashAndRoleInspect logs each unmet expectation
func (m *UserCacheRepositoryMock) MinimockSetHashAndRoleInspect() {
	for _, e := range m.SetHashAndRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.SetHashAndRole at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetHashAndRoleCounter := mm_atomic.LoadUint64(&m.afterSetHashAndRoleCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetHashAndRoleMock.defaultExpectation != nil && afterSetHashAndRoleCounter < 1 {
		if m.SetHashAndRoleMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.SetHashAndRole at\n%s", m.SetHashAndRoleMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.SetHashAndRole at\n%s with params: %#v", m.SetHashAndRoleMock.defaultExpectation.expectationOrigins.origin, *m.SetHashAndRoleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetHashAndRole != nil && afterSetHashAndRoleCounter < 1 {
		m.t.Errorf("Expected call to UserCacheRepositoryMock.SetHashAndRole at\n%s", m.funcSetHashAndRoleOrigin)
	}

	if !m.SetHashAndRoleMock.invocationsDone() && afterSetHashAndRoleCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheRepositoryMock.SetHashAndRole at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetHashAndRoleMock.expectedInvocations), m.SetHashAndRoleMock.expectedInvocationsOrigin, afterSetHashAndRoleCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCacheRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetHashAndRoleByUsernameInspect()

			m.MinimockSetHashAndRoleInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCacheRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCacheRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetHashAndRoleByUsernameDone() &&
		m.MinimockSetHashAndRoleDone()
}
